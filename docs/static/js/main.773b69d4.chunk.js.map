{"version":3,"sources":["components/Menu.js","components/QuestionList.js","components/Tool.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Menu","className","QuestionList","props","Fragment","questions","map","question","key","category","type","difficulty","includes","replace","Tool","Main","onSubmit","getQuestions","placeholder","value","App","state","ev","a","preventDefault","console","log","target","elements","numberOfQuestions","difficultyValue","typeValue","fetch","api_call","json","data","results","i","length","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.773b69d4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../stylesheets/Menu.scss\";\n\nfunction Menu() {\n  return (\n    <header className=\"header\">\n      <ul className=\"header__container\">\n        <li className=\"header__container-element\">\n          <i className=\"fas fa-bars\"></i>\n          Browse\n        </li>\n        <li className=\"header__container-element\">\n          <i className=\"fas fa-plus\"></i>\n          Add new questions\n        </li>\n        <li className=\"header__container-element\">\n          <i className=\"fas fa-cogs\"></i>\n          Api\n        </li>\n        <li className=\"header__container-element\">\n          <i className=\"fas fa-comments\"></i>\n          Discuss\n        </li>\n        <li className=\"header__container-element\">\n          <i className=\"fas fa-sign-in-alt\"></i>\n          Login\n        </li>\n      </ul>\n    </header>\n  );\n}\n\nexport default Menu;\n","import React from \"react\";\nimport \"../stylesheets/QuestionList.scss\";\nimport \"../stylesheets/Main.scss\";\n\nfunction QuestionList(props) {\n  return (\n    <React.Fragment>\n      {props.questions.map(question => {\n        return (\n          <tr className=\"table__container\" key={question.question}>\n            <td className=\"table__container-item\">9493</td>\n            <td className=\"table__container-item\">{question.category}</td>\n            <td className=\"table__container-item\">\n              {question.type === \"multiple\" ? \"multiple choice\" : \"True/False\"}\n            </td>\n            <td className=\"table__container-item\">{question.difficulty}</td>\n            <td className=\"table__container-question\">\n              {question.question.includes(\"&quot;\") || \"&#039;\" ? (\n                <p>\n                  {question.question\n                    .replace(/&#039;/g, \"'\")\n                    .replace(/&quot;/g, \"'\")}\n                </p>\n              ) : (\n                question.question\n              )}\n            </td>\n            <td className=\"table__container-author\">Karen</td>\n          </tr>\n        );\n      })}\n    </React.Fragment>\n  );\n}\n\nexport default QuestionList;\n","import React from \"react\";\nimport \"../stylesheets/Tool.scss\";\n\nfunction Tool() {\n  return (\n    <ul className=\"container\">\n      <li className=\"container-item start selected\">1</li>\n      <li className=\"container-item\">2</li>\n      <li className=\"container-item\">3</li>\n      <li className=\"container-item\">4</li>\n      <li className=\"container-item end\">></li>\n    </ul>\n  );\n}\n\nexport default Tool;\n","import React from \"react\";\nimport \"../stylesheets/Main.scss\";\nimport QuestionList from \"./QuestionList\";\nimport Tool from \"./Tool\";\n\nfunction Main(props) {\n  return (\n    <main className=\"main\">\n      <h1 className=\"main__title\">Browse Questions</h1>\n      <form className=\"main__form\" onSubmit={props.getQuestions}>\n        <input\n          type=\"number\"\n          className=\"main__form-number\"\n          placeholder=\"Number of questions\"\n        ></input>\n        <select className=\"main__form-type\">\n          <option value=\"\">Any Type</option>\n          <option value=\"multiple\">Multiple Choice</option>\n          <option value=\"boolean\">True/False</option>\n        </select>\n        <select className=\"main__form-difficulty\">\n          <option value=\"\">Any Difficulty</option>\n          <option value=\"easy\">Easy</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"hard\">Hard</option>\n        </select>\n\n        <button className=\"main__form-btn\">Search</button>\n      </form>\n      <table className=\"main__table\">\n        <thead>\n          <tr className=\"main__table__bold\">\n            <th className=\"main__table__bold-item-id\">\n              ID\n              <span className=\"main__table__bold-item-id-span\">\n                <i className=\"fas fa-sort-up\"></i>\n                <i className=\"fas fa-sort-down\"></i>\n              </span>\n            </th>\n            <th className=\"main__table__bold-item\">Category</th>\n            <th className=\"main__table__bold-item\">Type</th>\n            <th className=\"main__table__bold-item\">Difficulty</th>\n            <th className=\"main__table__bold-item\">Question/ Statement</th>\n            <th className=\"main__table__bold-item\">Created By</th>\n          </tr>\n        </thead>\n        <tbody className=\"table\">\n          <QuestionList questions={props.questions} />\n        </tbody>\n      </table>\n\n      <Tool />\n    </main>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"../stylesheets/App.css\";\nimport Menu from \"./Menu\";\nimport Main from \"./Main\";\n\nclass App extends React.Component {\n  state = {\n    questions: []\n  };\n\n  getQuestions = async ev => {\n    ev.preventDefault();\n    console.log(ev.target.elements[1].value);\n    const numberOfQuestions = ev.target.elements[0].value;\n    const difficultyValue = ev.target.elements[2].value;\n    const typeValue = ev.target.elements[1].value;\n    const api_call = await fetch(\n      `https://opentdb.com/api.php?amount=${numberOfQuestions}&difficulty=${difficultyValue}&type=${typeValue}`\n    );\n    const data = await api_call.json();\n    console.log(data.results);\n\n    for (let i = 0; i < data.results.length; i++) {\n      console.log(data.results[i]);\n    }\n\n    this.setState({\n      questions: data.results\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Menu />\n        <Main\n          getQuestions={this.getQuestions}\n          questions={this.state.questions}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./stylesheets/index.css\";\nimport App from \"./components/App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}